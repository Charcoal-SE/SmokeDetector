version: 2
jobs:
  build:
    docker:
      - image: cimg/python:3.11
    branches:
      ignore: deploy
    steps:
      - restore_cache:
          # Restore a basic .git to prevent needing to download the whole thing.
          keys:
            - git-cimg-python3.11-{{ .Branch }}
            - git-cimg-python3.11
            - git
      - checkout
      - save_cache:
          key: git-cimg-python3.11-{{ .Branch }}
          paths:
            - ".git"
      - run:
          # Put data about the CI environment upon which the env cache may depend
          # into the file ci_environment.txt, which we'll checksum in order to only use
          # the env cache when that data hasn't changed. Currently, that's the full
          # Python version.
          name: Gather CI environment information
          command: |
            python3 --version > ci_environment.txt
      - restore_cache:
          key: pip-cache-cimg-python3.8-{{ checksum "ci_environment.txt" }}-{{ checksum "requirements.txt" }}-{{ checksum "user_requirements.txt" }}
      - run:
          name: Install Python dependencies
          command: |
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            pip3 install -r requirements.txt --upgrade --upgrade-strategy eager
            pip3 install -r user_requirements.txt --upgrade --upgrade-strategy eager
      - save_cache:
          key: pip-cache-cimg-python3.8-{{ checksum "ci_environment.txt" }}-{{ checksum "requirements.txt" }}-{{ checksum "user_requirements.txt" }}
          paths:
            - "/home/circleci/.cache/pip"
      - run:
          name: Lint ./tests
          command: python3 -m flake8 --config=tox_tests.ini ./test/
      - run:
          name: Lint ./classes
          command: python3 -m flake8 --config=tox_classes.ini ./classes/
      - run:
          name: Lint code
          command: python3 -m flake8 ./
      - run:
          name: Prepare Git for test
          command: |
            git config user.name SmokeDetector
            git config user.email "smokey@erwaysoftware.com"
      - run:
          name: Pytest
          # Use 5 processes is intended to allow one DNS lookup bound long running test run
          # in parallel with most of the other tests which generally consume more CPU.
          command: python3 -W default::Warning -m pytest -n 5 --dist loadgroup --timeout=300 test
